//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace GitLib
{
    using System.Runtime.InteropServices;
    
    public static partial class libgit2
    {
        /// <summary>
        /// A result integer from a git function. 0 if successful, 
        /// &lt;
        /// 0 if an error.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct git_result : IEquatable<git_result>
        {
            public git_result(int value) => this.Value = value;
            
            public readonly int Value;
            
            public bool Equals(git_result other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is git_result other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator int(git_result from) => from.Value;
            
            public static implicit operator git_result(int from) => new git_result(from);
            
            public static bool operator ==(git_result left, git_result right) => left.Equals(right);
            
            public static bool operator !=(git_result left, git_result right) => !left.Equals(right);
        }
        
        public const uint GIT_REPOSITORY_INIT_OPTIONS_VERSION = 1;
    }
}

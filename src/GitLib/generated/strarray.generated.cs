//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace GitLib
{
    using System.Runtime.InteropServices;
    
    public static partial class libgit2
    {
        /// <summary>
        /// Array of strings
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct git_strarray
        {
            private IntPtr strings;
            
            private size_t count;
        }
        
        /// <summary>
        /// Close a string array object
        /// </summary>
        /// <param name="array">git_strarray from which to free string data</param>
        /// <remarks>
        /// This method should be called on `git_strarray` objects where the strings
        /// array is allocated and contains allocated strings, such as what you
        /// would get from `git_strarray_copy()`.  Not doing so, will result in a
        /// memory leak.This does not free the `git_strarray` itself, since the library will
        /// never allocate that object directly itself (it is more commonly embedded
        /// inside another struct or created on the stack).
        /// </remarks>
        [DllImport(GitLibName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void git_strarray_free(ref git_strarray array);
        
        /// <summary>
        /// Copy a string array object from source to target.
        /// </summary>
        /// <param name="tgt">target</param>
        /// <param name="src">source</param>
        /// <returns>0 on success, 
        /// &lt;
        /// 0 on allocation failure</returns>
        /// <remarks>
        /// Note: target is overwritten and hence should be empty, otherwise its
        /// contents are leaked.  Call git_strarray_free() if necessary.
        /// </remarks>
        [DllImport(GitLibName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int git_strarray_copy(ref git_strarray tgt, in git_strarray src);
    }
}

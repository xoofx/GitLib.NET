//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace GitLib
{
    using System.Runtime.InteropServices;
    
    public static partial class libgit2
    {
        /// <summary>
        /// Create a new transaction object
        /// </summary>
        /// <param name="out">the resulting transaction</param>
        /// <param name="repo">the repository in which to lock</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// This does not lock anything, but sets up the transaction object to
        /// know from which repository to lock.
        /// </remarks>
        public static git_result git_transaction_new(out git_transaction @out, git_repository repo)
        {
            var __result__ = git_transaction_new__(out @out, repo).Check();
            return __result__;
        }
        
        [DllImport(GitLibName, EntryPoint = "git_transaction_new", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_transaction_new__(out git_transaction @out, git_repository repo);
        
        /// <summary>
        /// Lock a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference to lock</param>
        /// <returns>0 or an error message</returns>
        /// <remarks>
        /// Lock the specified reference. This is the first step to updating a
        /// reference.
        /// </remarks>
        public static git_result git_transaction_lock_ref(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname)
        {
            var __result__ = git_transaction_lock_ref__(tx, refname).Check();
            return __result__;
        }
        
        [DllImport(GitLibName, EntryPoint = "git_transaction_lock_ref", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_transaction_lock_ref__(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname);
        
        /// <summary>
        /// Set the target of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">reference to update</param>
        /// <param name="target">target to set the reference to</param>
        /// <param name="sig">signature to use in the reflog; pass NULL to read the identity from the config</param>
        /// <param name="msg">message to use in the reflog</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the target of the specified reference. This reference must be
        /// locked.
        /// </remarks>
        public static git_result git_transaction_set_target(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname, in git_oid target, in git_signature sig, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string msg)
        {
            var __result__ = git_transaction_set_target__(tx, refname, target, sig, msg).Check();
            return __result__;
        }
        
        [DllImport(GitLibName, EntryPoint = "git_transaction_set_target", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_transaction_set_target__(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname, in git_oid target, in git_signature sig, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string msg);
        
        /// <summary>
        /// Set the target of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">reference to update</param>
        /// <param name="target">target to set the reference to</param>
        /// <param name="sig">signature to use in the reflog; pass NULL to read the identity from the config</param>
        /// <param name="msg">message to use in the reflog</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the target of the specified reference. This reference must be
        /// locked.
        /// </remarks>
        public static git_result git_transaction_set_symbolic_target(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string target, in git_signature sig, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string msg)
        {
            var __result__ = git_transaction_set_symbolic_target__(tx, refname, target, sig, msg).Check();
            return __result__;
        }
        
        [DllImport(GitLibName, EntryPoint = "git_transaction_set_symbolic_target", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_transaction_set_symbolic_target__(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string target, in git_signature sig, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string msg);
        
        /// <summary>
        /// Set the reflog of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference whose reflog to set</param>
        /// <param name="reflog">the reflog as it should be written out</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the specified reference's reflog. If this is combined with
        /// setting the target, that update won't be written to the reflog.
        /// </remarks>
        public static git_result git_transaction_set_reflog(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname, git_reflog reflog)
        {
            var __result__ = git_transaction_set_reflog__(tx, refname, reflog).Check();
            return __result__;
        }
        
        [DllImport(GitLibName, EntryPoint = "git_transaction_set_reflog", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_transaction_set_reflog__(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname, git_reflog reflog);
        
        /// <summary>
        /// Remove a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference to remove</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        public static git_result git_transaction_remove(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname)
        {
            var __result__ = git_transaction_remove__(tx, refname).Check();
            return __result__;
        }
        
        [DllImport(GitLibName, EntryPoint = "git_transaction_remove", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_transaction_remove__(git_transaction tx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerStrict))] string refname);
        
        /// <summary>
        /// Commit the changes from the transaction
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// Perform the changes that have been queued. The updates will be made
        /// one by one, and the first failure will stop the processing.
        /// </remarks>
        public static git_result git_transaction_commit(git_transaction tx)
        {
            var __result__ = git_transaction_commit__(tx).Check();
            return __result__;
        }
        
        [DllImport(GitLibName, EntryPoint = "git_transaction_commit", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_transaction_commit__(git_transaction tx);
        
        /// <summary>
        /// Free the resources allocated by this transaction
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <remarks>
        /// If any references remain locked, they will be unlocked without any
        /// changes made to them.
        /// </remarks>
        [DllImport(GitLibName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void git_transaction_free(git_transaction tx);
    }
}

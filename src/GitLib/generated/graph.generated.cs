//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace GitLib
{
    using System.Runtime.InteropServices;
    
    public static partial class libgit2
    {
        /// <summary>
        /// Count the number of unique commits between two commit objects
        /// </summary>
        /// <param name="ahead">number of unique from commits in `upstream`</param>
        /// <param name="behind">number of unique from commits in `local`</param>
        /// <param name="repo">the repository where the commits exist</param>
        /// <param name="local">the commit for local</param>
        /// <param name="upstream">the commit for upstream</param>
        /// <remarks>
        /// There is no need for branches containing the commits to have any
        /// upstream relationship, but it helps to think of one as a branch and
        /// the other as its upstream, the `ahead` and `behind` values will be
        /// what git would report for the branches.
        /// </remarks>
        [DllImport(GitLibName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int git_graph_ahead_behind(ref size_t ahead, ref size_t behind, git_repository repo, in git_oid local, in git_oid upstream);
        
        /// <summary>
        /// Determine if a commit is the descendant of another commit.
        /// </summary>
        /// <param name="commit">a previously loaded commit.</param>
        /// <param name="ancestor">a potential ancestor commit.</param>
        /// <returns>1 if the given commit is a descendant of the potential ancestor,
        /// 0 if not, error code otherwise.</returns>
        /// <remarks>
        /// Note that a commit is not considered a descendant of itself, in contrast
        /// to `git merge-base --is-ancestor`.
        /// </remarks>
        [DllImport(GitLibName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int git_graph_descendant_of(git_repository repo, in git_oid commit, in git_oid ancestor);
    }
}

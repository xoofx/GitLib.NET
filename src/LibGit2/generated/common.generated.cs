//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace LibGit2
{
    using System.Runtime.InteropServices;
    
    public static partial class libgit2
    {
        /// <summary>
        /// Combinations of these values describe the features with which libgit2
        /// was compiled
        /// </summary>
        [Flags]
        public enum git_feature_t : int
        {
            /// <summary>
            /// If set, libgit2 was built thread-aware and can be safely used from multiple
            /// threads.
            /// </summary>
            GIT_FEATURE_THREADS = (int)(1 << 0),
            
            /// <summary>
            /// If set, libgit2 was built with and linked against a TLS implementation.
            /// Custom TLS streams may still be added by the user to support HTTPS
            /// regardless of this.
            /// </summary>
            GIT_FEATURE_HTTPS = (int)(1 << 1),
            
            /// <summary>
            /// If set, libgit2 was built with and linked against libssh2. A custom
            /// transport may still be added by the user to support libssh2 regardless of
            /// this.
            /// </summary>
            GIT_FEATURE_SSH = (int)(1 << 2),
            
            /// <summary>
            /// If set, libgit2 was built with support for sub-second resolution in file
            /// modification times.
            /// </summary>
            GIT_FEATURE_NSEC = (int)(1 << 3),
        }
        
        /// <summary>
        /// If set, libgit2 was built thread-aware and can be safely used from multiple
        /// threads.
        /// </summary>
        public const git_feature_t GIT_FEATURE_THREADS = git_feature_t.GIT_FEATURE_THREADS;
        
        /// <summary>
        /// If set, libgit2 was built with and linked against a TLS implementation.
        /// Custom TLS streams may still be added by the user to support HTTPS
        /// regardless of this.
        /// </summary>
        public const git_feature_t GIT_FEATURE_HTTPS = git_feature_t.GIT_FEATURE_HTTPS;
        
        /// <summary>
        /// If set, libgit2 was built with and linked against libssh2. A custom
        /// transport may still be added by the user to support libssh2 regardless of
        /// this.
        /// </summary>
        public const git_feature_t GIT_FEATURE_SSH = git_feature_t.GIT_FEATURE_SSH;
        
        /// <summary>
        /// If set, libgit2 was built with support for sub-second resolution in file
        /// modification times.
        /// </summary>
        public const git_feature_t GIT_FEATURE_NSEC = git_feature_t.GIT_FEATURE_NSEC;
        
        /// <summary>
        /// Global library options
        /// </summary>
        /// <remarks>
        /// These are used to select which global option to set or get and are
        /// used in `git_libgit2_opts()`.
        /// </remarks>
        public enum git_libgit2_opt_t : int
        {
            GIT_OPT_GET_MWINDOW_SIZE,
            
            GIT_OPT_SET_MWINDOW_SIZE,
            
            GIT_OPT_GET_MWINDOW_MAPPED_LIMIT,
            
            GIT_OPT_SET_MWINDOW_MAPPED_LIMIT,
            
            GIT_OPT_GET_SEARCH_PATH,
            
            GIT_OPT_SET_SEARCH_PATH,
            
            GIT_OPT_SET_CACHE_OBJECT_LIMIT,
            
            GIT_OPT_SET_CACHE_MAX_SIZE,
            
            GIT_OPT_ENABLE_CACHING,
            
            GIT_OPT_GET_CACHED_MEMORY,
            
            GIT_OPT_GET_TEMPLATE_PATH,
            
            GIT_OPT_SET_TEMPLATE_PATH,
            
            GIT_OPT_SET_SSL_CERT_LOCATIONS,
            
            GIT_OPT_SET_USER_AGENT,
            
            GIT_OPT_ENABLE_STRICT_OBJECT_CREATION,
            
            GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION,
            
            GIT_OPT_SET_SSL_CIPHERS,
            
            GIT_OPT_GET_USER_AGENT,
            
            GIT_OPT_ENABLE_OFS_DELTA,
            
            GIT_OPT_ENABLE_FSYNC_GITDIR,
            
            GIT_OPT_GET_WINDOWS_SHAREMODE,
            
            GIT_OPT_SET_WINDOWS_SHAREMODE,
            
            GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION,
            
            GIT_OPT_SET_ALLOCATOR,
            
            GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY,
            
            GIT_OPT_GET_PACK_MAX_OBJECTS,
            
            GIT_OPT_SET_PACK_MAX_OBJECTS,
        }
        
        public const git_libgit2_opt_t GIT_OPT_GET_MWINDOW_SIZE = git_libgit2_opt_t.GIT_OPT_GET_MWINDOW_SIZE;
        
        public const git_libgit2_opt_t GIT_OPT_SET_MWINDOW_SIZE = git_libgit2_opt_t.GIT_OPT_SET_MWINDOW_SIZE;
        
        public const git_libgit2_opt_t GIT_OPT_GET_MWINDOW_MAPPED_LIMIT = git_libgit2_opt_t.GIT_OPT_GET_MWINDOW_MAPPED_LIMIT;
        
        public const git_libgit2_opt_t GIT_OPT_SET_MWINDOW_MAPPED_LIMIT = git_libgit2_opt_t.GIT_OPT_SET_MWINDOW_MAPPED_LIMIT;
        
        public const git_libgit2_opt_t GIT_OPT_GET_SEARCH_PATH = git_libgit2_opt_t.GIT_OPT_GET_SEARCH_PATH;
        
        public const git_libgit2_opt_t GIT_OPT_SET_SEARCH_PATH = git_libgit2_opt_t.GIT_OPT_SET_SEARCH_PATH;
        
        public const git_libgit2_opt_t GIT_OPT_SET_CACHE_OBJECT_LIMIT = git_libgit2_opt_t.GIT_OPT_SET_CACHE_OBJECT_LIMIT;
        
        public const git_libgit2_opt_t GIT_OPT_SET_CACHE_MAX_SIZE = git_libgit2_opt_t.GIT_OPT_SET_CACHE_MAX_SIZE;
        
        public const git_libgit2_opt_t GIT_OPT_ENABLE_CACHING = git_libgit2_opt_t.GIT_OPT_ENABLE_CACHING;
        
        public const git_libgit2_opt_t GIT_OPT_GET_CACHED_MEMORY = git_libgit2_opt_t.GIT_OPT_GET_CACHED_MEMORY;
        
        public const git_libgit2_opt_t GIT_OPT_GET_TEMPLATE_PATH = git_libgit2_opt_t.GIT_OPT_GET_TEMPLATE_PATH;
        
        public const git_libgit2_opt_t GIT_OPT_SET_TEMPLATE_PATH = git_libgit2_opt_t.GIT_OPT_SET_TEMPLATE_PATH;
        
        public const git_libgit2_opt_t GIT_OPT_SET_SSL_CERT_LOCATIONS = git_libgit2_opt_t.GIT_OPT_SET_SSL_CERT_LOCATIONS;
        
        public const git_libgit2_opt_t GIT_OPT_SET_USER_AGENT = git_libgit2_opt_t.GIT_OPT_SET_USER_AGENT;
        
        public const git_libgit2_opt_t GIT_OPT_ENABLE_STRICT_OBJECT_CREATION = git_libgit2_opt_t.GIT_OPT_ENABLE_STRICT_OBJECT_CREATION;
        
        public const git_libgit2_opt_t GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION = git_libgit2_opt_t.GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION;
        
        public const git_libgit2_opt_t GIT_OPT_SET_SSL_CIPHERS = git_libgit2_opt_t.GIT_OPT_SET_SSL_CIPHERS;
        
        public const git_libgit2_opt_t GIT_OPT_GET_USER_AGENT = git_libgit2_opt_t.GIT_OPT_GET_USER_AGENT;
        
        public const git_libgit2_opt_t GIT_OPT_ENABLE_OFS_DELTA = git_libgit2_opt_t.GIT_OPT_ENABLE_OFS_DELTA;
        
        public const git_libgit2_opt_t GIT_OPT_ENABLE_FSYNC_GITDIR = git_libgit2_opt_t.GIT_OPT_ENABLE_FSYNC_GITDIR;
        
        public const git_libgit2_opt_t GIT_OPT_GET_WINDOWS_SHAREMODE = git_libgit2_opt_t.GIT_OPT_GET_WINDOWS_SHAREMODE;
        
        public const git_libgit2_opt_t GIT_OPT_SET_WINDOWS_SHAREMODE = git_libgit2_opt_t.GIT_OPT_SET_WINDOWS_SHAREMODE;
        
        public const git_libgit2_opt_t GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION = git_libgit2_opt_t.GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION;
        
        public const git_libgit2_opt_t GIT_OPT_SET_ALLOCATOR = git_libgit2_opt_t.GIT_OPT_SET_ALLOCATOR;
        
        public const git_libgit2_opt_t GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY = git_libgit2_opt_t.GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY;
        
        public const git_libgit2_opt_t GIT_OPT_GET_PACK_MAX_OBJECTS = git_libgit2_opt_t.GIT_OPT_GET_PACK_MAX_OBJECTS;
        
        public const git_libgit2_opt_t GIT_OPT_SET_PACK_MAX_OBJECTS = git_libgit2_opt_t.GIT_OPT_SET_PACK_MAX_OBJECTS;
        
        /// <summary>
        /// Return the version of the libgit2 library
        /// being currently used.
        /// </summary>
        /// <param name="major">Store the major version number</param>
        /// <param name="minor">Store the minor version number</param>
        /// <param name="rev">Store the revision (patch) number</param>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern void git_libgit2_version(ref int major, ref int minor, ref int rev);
        
        /// <summary>
        /// Query compile time options for libgit2.
        /// </summary>
        /// <returns>A combination of GIT_FEATURE_* values.</returns>
        /// <remarks>
        /// - GIT_FEATURE_THREADS
        /// Libgit2 was compiled with thread support. Note that thread support is
        /// still to be seen as a 'work in progress' - basic object lookups are
        /// believed to be threadsafe, but other operations may not be.- GIT_FEATURE_HTTPS
        /// Libgit2 supports the https:// protocol. This requires the openssl
        /// library to be found when compiling libgit2.- GIT_FEATURE_SSH
        /// Libgit2 supports the SSH protocol for network operations. This requires
        /// the libssh2 library to be found when compiling libgit2
        /// </remarks>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern int git_libgit2_features();
        
        /// <summary>
        /// Set or query a library global option
        /// </summary>
        /// <param name="option">Option key</param>
        /// <param name="...">value to set the option</param>
        /// <returns>0 on success, 
        /// &lt;
        /// 0 on failure</returns>
        /// <remarks>
        /// Available options:* opts(GIT_OPT_GET_MWINDOW_SIZE, size_t *):&gt; Get the maximum mmap window size* opts(GIT_OPT_SET_MWINDOW_SIZE, size_t):&gt; Set the maximum mmap window size* opts(GIT_OPT_GET_MWINDOW_MAPPED_LIMIT, size_t *):&gt; Get the maximum memory that will be mapped in total by the library* opts(GIT_OPT_SET_MWINDOW_MAPPED_LIMIT, size_t):&gt;Set the maximum amount of memory that can be mapped at any time
        /// by the library* opts(GIT_OPT_GET_SEARCH_PATH, int level, git_buf *buf)&gt; Get the search path for a given level of config data.  "level" must
        /// &gt; be one of `GIT_CONFIG_LEVEL_SYSTEM`, `GIT_CONFIG_LEVEL_GLOBAL`,
        /// &gt; `GIT_CONFIG_LEVEL_XDG`, or `GIT_CONFIG_LEVEL_PROGRAMDATA`.
        /// &gt; The search path is written to the `out` buffer.* opts(GIT_OPT_SET_SEARCH_PATH, int level, const char *path)&gt; Set the search path for a level of config data.  The search path
        /// &gt; applied to shared attributes and ignore files, too.
        /// &gt;
        /// &gt; - `path` lists directories delimited by GIT_PATH_LIST_SEPARATOR.
        /// &gt;   Pass NULL to reset to the default (generally based on environment
        /// &gt;   variables).  Use magic path `$PATH` to include the old value
        /// &gt;   of the path (if you want to prepend or append, for instance).
        /// &gt;
        /// &gt; - `level` must be `GIT_CONFIG_LEVEL_SYSTEM`,
        /// &gt;   `GIT_CONFIG_LEVEL_GLOBAL`, `GIT_CONFIG_LEVEL_XDG`, or
        /// &gt;   `GIT_CONFIG_LEVEL_PROGRAMDATA`.* opts(GIT_OPT_SET_CACHE_OBJECT_LIMIT, git_object_t type, size_t size)&gt; Set the maximum data size for the given type of object to be
        /// &gt; considered eligible for caching in memory.  Setting to value to
        /// &gt; zero means that that type of object will not be cached.
        /// &gt; Defaults to 0 for GIT_OBJECT_BLOB (i.e. won't cache blobs) and 4k
        /// &gt; for GIT_OBJECT_COMMIT, GIT_OBJECT_TREE, and GIT_OBJECT_TAG.* opts(GIT_OPT_SET_CACHE_MAX_SIZE, ssize_t max_storage_bytes)&gt; Set the maximum total data size that will be cached in memory
        /// &gt; across all repositories before libgit2 starts evicting objects
        /// &gt; from the cache.  This is a soft limit, in that the library might
        /// &gt; briefly exceed it, but will start aggressively evicting objects
        /// &gt; from cache when that happens.  The default cache size is 256MB.* opts(GIT_OPT_ENABLE_CACHING, int enabled)&gt; Enable or disable caching completely.
        /// &gt;
        /// &gt; Because caches are repository-specific, disabling the cache
        /// &gt; cannot immediately clear all cached objects, but each cache will
        /// &gt; be cleared on the next attempt to update anything in it.* opts(GIT_OPT_GET_CACHED_MEMORY, ssize_t *current, ssize_t *allowed)&gt; Get the current bytes in cache and the maximum that would be
        /// &gt; allowed in the cache.* opts(GIT_OPT_GET_TEMPLATE_PATH, git_buf *out)&gt; Get the default template path.
        /// &gt; The path is written to the `out` buffer.* opts(GIT_OPT_SET_TEMPLATE_PATH, const char *path)&gt; Set the default template path.
        /// &gt;
        /// &gt; - `path` directory of template.* opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, const char *file, const char *path)&gt; Set the SSL certificate-authority locations.
        /// &gt;
        /// &gt; - `file` is the location of a file containing several
        /// &gt;   certificates concatenated together.
        /// &gt; - `path` is the location of a directory holding several
        /// &gt;   certificates, one per file.
        /// &gt;
        /// &gt; Either parameter may be `NULL`, but not both.* opts(GIT_OPT_SET_USER_AGENT, const char *user_agent)&gt; Set the value of the User-Agent header.  This value will be
        /// &gt; appended to "git/1.0", for compatibility with other git clients.
        /// &gt;
        /// &gt; - `user_agent` is the value that will be delivered as the
        /// &gt;   User-Agent header on HTTP requests.* opts(GIT_OPT_SET_WINDOWS_SHAREMODE, unsigned long value)&gt; Set the share mode used when opening files on Windows.
        /// &gt; For more information, see the documentation for CreateFile.
        /// &gt; The default is: FILE_SHARE_READ | FILE_SHARE_WRITE.  This is
        /// &gt; ignored and unused on non-Windows platforms.* opts(GIT_OPT_GET_WINDOWS_SHAREMODE, unsigned long *value)&gt; Get the share mode used when opening files on Windows.* opts(GIT_OPT_ENABLE_STRICT_OBJECT_CREATION, int enabled)&gt; Enable strict input validation when creating new objects
        /// &gt; to ensure that all inputs to the new objects are valid.  For
        /// &gt; example, when this is enabled, the parent(s) and tree inputs
        /// &gt; will be validated when creating a new commit.  This defaults
        /// &gt; to enabled.* opts(GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION, int enabled)&gt; Validate the target of a symbolic ref when creating it.  For
        /// &gt; example, `foobar` is not a valid ref, therefore `foobar` is
        /// &gt; not a valid target for a symbolic ref by default, whereas
        /// &gt; `refs/heads/foobar` is.  Disabling this bypasses validation
        /// &gt; so that an arbitrary strings such as `foobar` can be used
        /// &gt; for a symbolic ref target.  This defaults to enabled.* opts(GIT_OPT_SET_SSL_CIPHERS, const char *ciphers)&gt; Set the SSL ciphers use for HTTPS connections.
        /// &gt;
        /// &gt; - `ciphers` is the list of ciphers that are eanbled.* opts(GIT_OPT_ENABLE_OFS_DELTA, int enabled)&gt; Enable or disable the use of "offset deltas" when creating packfiles,
        /// &gt; and the negotiation of them when talking to a remote server.
        /// &gt; Offset deltas store a delta base location as an offset into the
        /// &gt; packfile from the current location, which provides a shorter encoding
        /// &gt; and thus smaller resultant packfiles.
        /// &gt; Packfiles containing offset deltas can still be read.
        /// &gt; This defaults to enabled.* opts(GIT_OPT_ENABLE_FSYNC_GITDIR, int enabled)&gt; Enable synchronized writes of files in the gitdir using `fsync`
        /// &gt; (or the platform equivalent) to ensure that new object data
        /// &gt; is written to permanent storage, not simply cached.  This
        /// &gt; defaults to disabled.opts(GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION, int enabled)&gt; Enable strict verification of object hashsums when reading
        /// &gt; objects from disk. This may impact performance due to an
        /// &gt; additional checksum calculation on each object. This defaults
        /// &gt; to enabled.opts(GIT_OPT_SET_ALLOCATOR, git_allocator *allocator)&gt; Set the memory allocator to a different memory allocator. This
        /// &gt; allocator will then be used to make all memory allocations for
        /// &gt; libgit2 operations.  If the given `allocator` is NULL, then the
        /// &gt; system default will be restored.opts(GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY, int enabled)&gt; Ensure that there are no unsaved changes in the index before
        /// &gt; beginning any operation that reloads the index from disk (eg,
        /// &gt; checkout).  If there are unsaved changes, the instruction will
        /// &gt; fail.  (Using the FORCE flag to checkout will still overwrite
        /// &gt; these changes.)opts(GIT_OPT_GET_PACK_MAX_OBJECTS, size_t *out)&gt; Get the maximum number of objects libgit2 will allow in a pack
        /// &gt; file when downloading a pack file from a remote. This can be
        /// &gt; used to limit maximum memory usage when fetching from an untrusted
        /// &gt; remote.opts(GIT_OPT_SET_PACK_MAX_OBJECTS, size_t objects)&gt; Set the maximum number of objects libgit2 will allow in a pack
        /// &gt; file when downloading a pack file from a remote.
        /// </remarks>
        public static git_result git_libgit2_opts(int option)
        {
            var __result__ = git_libgit2_opts__(option).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_libgit2_opts", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_libgit2_opts__(int option);
    }
}

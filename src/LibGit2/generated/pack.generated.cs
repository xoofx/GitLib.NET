//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace LibGit2
{
    using System.Runtime.InteropServices;
    
    public static partial class libgit2
    {
        /// <summary>
        /// Stages that are reported by the packbuilder progress callback.
        /// </summary>
        public enum git_packbuilder_stage_t : int
        {
            GIT_PACKBUILDER_ADDING_OBJECTS = (int)0,
            
            GIT_PACKBUILDER_DELTAFICATION = (int)1,
        }
        
        public const git_packbuilder_stage_t GIT_PACKBUILDER_ADDING_OBJECTS = git_packbuilder_stage_t.GIT_PACKBUILDER_ADDING_OBJECTS;
        
        public const git_packbuilder_stage_t GIT_PACKBUILDER_DELTAFICATION = git_packbuilder_stage_t.GIT_PACKBUILDER_DELTAFICATION;
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate int git_packbuilder_progress(int stage, uint current, uint total, IntPtr payload);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate int git_packbuilder_foreach_cb(IntPtr buf, size_t size, IntPtr payload);
        
        /// <summary>
        /// Initialize a new packbuilder
        /// </summary>
        /// <param name="out">The new packbuilder object</param>
        /// <param name="repo">The repository</param>
        /// <returns>0 or an error code</returns>
        public static git_result git_packbuilder_new(out git_packbuilder @out, git_repository repo)
        {
            var __result__ = git_packbuilder_new__(out @out, repo).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_new", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_new__(out git_packbuilder @out, git_repository repo);
        
        /// <summary>
        /// Set number of threads to spawn
        /// </summary>
        /// <param name="pb">The packbuilder</param>
        /// <param name="n">Number of threads to spawn</param>
        /// <returns>number of actual threads to be used</returns>
        /// <remarks>
        /// By default, libgit2 won't spawn any threads at all;
        /// when set to 0, libgit2 will autodetect the number of
        /// CPUs.
        /// </remarks>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint git_packbuilder_set_threads(git_packbuilder pb, uint n);
        
        /// <summary>
        /// Insert a single object
        /// </summary>
        /// <param name="pb">The packbuilder</param>
        /// <param name="id">The oid of the commit</param>
        /// <param name="name">The name; might be NULL</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// For an optimal pack it's mandatory to insert objects in recency order,
        /// commits followed by trees and blobs.
        /// </remarks>
        public static git_result git_packbuilder_insert(git_packbuilder pb, in git_oid id, [MarshalAs(UnmanagedType.LPUTF8Str)] string name)
        {
            var __result__ = git_packbuilder_insert__(pb, id, name).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_insert", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_insert__(git_packbuilder pb, in git_oid id, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);
        
        /// <summary>
        /// Insert a root tree object
        /// </summary>
        /// <param name="pb">The packbuilder</param>
        /// <param name="id">The oid of the root tree</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// This will add the tree as well as all referenced trees and blobs.
        /// </remarks>
        public static git_result git_packbuilder_insert_tree(git_packbuilder pb, in git_oid id)
        {
            var __result__ = git_packbuilder_insert_tree__(pb, id).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_insert_tree", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_insert_tree__(git_packbuilder pb, in git_oid id);
        
        /// <summary>
        /// Insert a commit object
        /// </summary>
        /// <param name="pb">The packbuilder</param>
        /// <param name="id">The oid of the commit</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// This will add a commit as well as the completed referenced tree.
        /// </remarks>
        public static git_result git_packbuilder_insert_commit(git_packbuilder pb, in git_oid id)
        {
            var __result__ = git_packbuilder_insert_commit__(pb, id).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_insert_commit", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_insert_commit__(git_packbuilder pb, in git_oid id);
        
        /// <summary>
        /// Insert objects as given by the walk
        /// </summary>
        /// <param name="pb">the packbuilder</param>
        /// <param name="walk">the revwalk to use to fill the packbuilder</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// Those commits and all objects they reference will be inserted into
        /// the packbuilder.
        /// </remarks>
        public static git_result git_packbuilder_insert_walk(git_packbuilder pb, git_revwalk walk)
        {
            var __result__ = git_packbuilder_insert_walk__(pb, walk).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_insert_walk", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_insert_walk__(git_packbuilder pb, git_revwalk walk);
        
        /// <summary>
        /// Recursively insert an object and its referenced objects
        /// </summary>
        /// <param name="pb">the packbuilder</param>
        /// <param name="id">the id of the root object to insert</param>
        /// <param name="name">optional name for the object</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// Insert the object as well as any object it references.
        /// </remarks>
        public static git_result git_packbuilder_insert_recur(git_packbuilder pb, in git_oid id, [MarshalAs(UnmanagedType.LPUTF8Str)] string name)
        {
            var __result__ = git_packbuilder_insert_recur__(pb, id, name).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_insert_recur", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_insert_recur__(git_packbuilder pb, in git_oid id, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);
        
        /// <summary>
        /// Write the contents of the packfile to an in-memory buffer
        /// </summary>
        /// <param name="buf">Buffer where to write the packfile</param>
        /// <param name="pb">The packbuilder</param>
        /// <remarks>
        /// The contents of the buffer will become a valid packfile, even though there
        /// will be no attached index
        /// </remarks>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern int git_packbuilder_write_buf(ref git_buf buf, git_packbuilder pb);
        
        /// <summary>
        /// Write the new pack and corresponding index file to path.
        /// </summary>
        /// <param name="pb">The packbuilder</param>
        /// <param name="path">to the directory where the packfile and index should be stored</param>
        /// <param name="mode">permissions to use creating a packfile or 0 for defaults</param>
        /// <param name="progress_cb">function to call with progress information from the indexer (optional)</param>
        /// <param name="progress_cb_payload">payload for the progress callback (optional)</param>
        /// <returns>0 or an error code</returns>
        public static git_result git_packbuilder_write(git_packbuilder pb, [MarshalAs(UnmanagedType.LPUTF8Str)] string path, uint mode, git_transfer_progress_cb progress_cb, IntPtr progress_cb_payload)
        {
            var __result__ = git_packbuilder_write__(pb, path, mode, progress_cb, progress_cb_payload).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_write", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_write__(git_packbuilder pb, [MarshalAs(UnmanagedType.LPUTF8Str)] string path, uint mode, git_transfer_progress_cb progress_cb, IntPtr progress_cb_payload);
        
        /// <summary>
        /// Get the packfile's hash
        /// </summary>
        /// <param name="pb">The packbuilder object</param>
        /// <remarks>
        /// A packfile's name is derived from the sorted hashing of all object
        /// names. This is only correct after the packfile has been written.
        /// </remarks>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern ref readonly git_oid git_packbuilder_hash(git_packbuilder pb);
        
        /// <summary>
        /// Create the new pack and pass each object to the callback
        /// </summary>
        /// <param name="pb">the packbuilder</param>
        /// <param name="cb">the callback to call with each packed object's buffer</param>
        /// <param name="payload">the callback's data</param>
        /// <returns>0 or an error code</returns>
        public static git_result git_packbuilder_foreach(git_packbuilder pb, git_packbuilder_foreach_cb cb, IntPtr payload)
        {
            var __result__ = git_packbuilder_foreach__(pb, cb, payload).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_foreach", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_foreach__(git_packbuilder pb, git_packbuilder_foreach_cb cb, IntPtr payload);
        
        /// <summary>
        /// Get the total number of objects the packbuilder will write out
        /// </summary>
        /// <param name="pb">the packbuilder</param>
        /// <returns>the number of objects in the packfile</returns>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern size_t git_packbuilder_object_count(git_packbuilder pb);
        
        /// <summary>
        /// Get the number of objects the packbuilder has already written out
        /// </summary>
        /// <param name="pb">the packbuilder</param>
        /// <returns>the number of objects which have already been written</returns>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern size_t git_packbuilder_written(git_packbuilder pb);
        
        /// <summary>
        /// Set the callbacks for a packbuilder
        /// </summary>
        /// <param name="pb">The packbuilder object</param>
        /// <param name="progress_cb">Function to call with progress information during
        /// pack building. Be aware that this is called inline with pack building
        /// operations, so performance may be affected.</param>
        /// <param name="progress_cb_payload">Payload for progress callback.</param>
        /// <returns>0 or an error code</returns>
        public static git_result git_packbuilder_set_callbacks(git_packbuilder pb, git_packbuilder_progress progress_cb, IntPtr progress_cb_payload)
        {
            var __result__ = git_packbuilder_set_callbacks__(pb, progress_cb, progress_cb_payload).Check();
            return __result__;
        }
        
        [DllImport(LibGit2Name, EntryPoint = "git_packbuilder_set_callbacks", CallingConvention = CallingConvention.Cdecl)]
        private static extern git_result git_packbuilder_set_callbacks__(git_packbuilder pb, git_packbuilder_progress progress_cb, IntPtr progress_cb_payload);
        
        /// <summary>
        /// Free the packbuilder and all associated data
        /// </summary>
        /// <param name="pb">The packbuilder</param>
        [DllImport(LibGit2Name, CallingConvention = CallingConvention.Cdecl)]
        public static extern void git_packbuilder_free(git_packbuilder pb);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace LibGit2
{
    using System.Runtime.InteropServices;
    
    public static partial class libgit2
    {
        /// <summary>
        /// Direction of the connection.
        /// </summary>
        /// <remarks>
        /// We need this because we need to know whether we should call
        /// git-upload-pack or git-receive-pack on the remote end when get_refs
        /// gets called.
        /// </remarks>
        public enum git_direction : int
        {
            GIT_DIRECTION_FETCH = (int)0,
            
            GIT_DIRECTION_PUSH = (int)1,
        }
        
        public const git_direction GIT_DIRECTION_FETCH = git_direction.GIT_DIRECTION_FETCH;
        
        public const git_direction GIT_DIRECTION_PUSH = git_direction.GIT_DIRECTION_PUSH;
        
        /// <summary>
        /// Description of a reference advertised by a remote server, given out
        /// on `ls` calls.
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct git_remote_head
        {
            /// <summary>
            /// available locally
            /// </summary>
            public int local;
            
            public git_oid oid;
            
            public git_oid loid;
            
            public IntPtr name;
            
            /// <summary>
            /// If the server send a symref mapping for this ref, this will
            /// point to the target.
            /// </summary>
            public IntPtr symref_target;
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate int git_headlist_cb(ref git_remote_head rhead, IntPtr payload);
    }
}

using System.Collections.Generic;

namespace GitLib.CodeGen
{
    public partial class Program
    {
        private static HashSet<string> _gitResultFunctions = new HashSet<string>()
        {
            // annotated_commit.h
            "git_annotated_commit_from_fetchhead",
            "git_annotated_commit_from_ref",
            "git_annotated_commit_from_revspec",
            "git_annotated_commit_lookup",
            // attr.h
            "git_attr_foreach",
            // blame.h
            "git_blame_buffer",
            "git_blame_file",
            "git_blame_init_options",
            // blob.h
            "git_blob_create_frombuffer",
            "git_blob_create_fromdisk",
            "git_blob_create_fromstream",
            "git_blob_create_fromstream_commit",
            "git_blob_create_fromworkdir",
            "git_blob_filtered_content",
            "git_blob_lookup",
            "git_blob_lookup_prefix",
            // branch.h
            "git_branch_create",
            "git_branch_delete",
            "git_branch_iterator_new",
            "git_branch_lookup",
            "git_branch_move",
            "git_branch_name",
            "git_branch_next",
            "git_branch_remote_name",
            "git_branch_set_upstream",
            "git_branch_upstream",
            "git_branch_upstream_name",
            "git_branch_upstream_remote",
            // buffer.h
            "git_buf_grow",
            "git_buf_set",
            // checkout.h
            "git_checkout_head",
            "git_checkout_index",
            "git_checkout_init_options",
            "git_checkout_tree",
            // cherrypick.h
            "git_cherrypick_init_options",
            // clone.h
            "git_clone",
            "git_clone_init_options",
            // commit.h
            "git_commit_author_with_mailmap",
            "git_commit_committer_with_mailmap",
            "git_commit_create",
            "git_commit_create_buffer",
            "git_commit_create_with_signature",
            "git_commit_header_field",
            "git_commit_lookup",
            "git_commit_lookup_prefix",
            "git_commit_nth_gen_ancestor",
            "git_commit_parent",
            "git_commit_tree",
            // common.h
            "git_libgit2_opts",
            // config.h
            "git_config_add_file_ondisk",
            "git_config_delete_multivar",
            "git_config_foreach",
            "git_config_get_bool",
            "git_config_get_entry",
            "git_config_get_int32",
            "git_config_get_int64",
            "git_config_get_mapped",
            "git_config_get_path",
            "git_config_get_string",
            "git_config_get_string_buf",
            "git_config_lock",
            "git_config_new",
            "git_config_next",
            "git_config_open_default",
            "git_config_open_level",
            "git_config_open_ondisk",
            "git_config_set_bool",
            "git_config_set_int32",
            "git_config_set_int64",
            "git_config_set_string",
            "git_config_snapshot",
            // describe.h
            "git_describe_init_format_options",
            "git_describe_init_options",
            // diff.h
            "git_diff_blob_to_buffer",
            "git_diff_blobs",
            "git_diff_buffers",
            "git_diff_commit_as_email",
            "git_diff_find_init_options",
            "git_diff_find_similar",
            "git_diff_foreach",
            "git_diff_format_email",
            "git_diff_format_email_init_options",
            "git_diff_from_buffer",
            "git_diff_get_stats",
            "git_diff_init_options",
            "git_diff_patchid",
            "git_diff_patchid_init_options",
            "git_diff_print",
            "git_diff_stats_to_buf",
            "git_diff_to_buf",
            // filter.h
            "git_filter_list_apply_to_data",
            "git_filter_list_load",
            // ignore.h
            "git_ignore_path_is_ignored",
            // index.h
            "git_index_add",
            "git_index_add_all",
            "git_index_add_bypath",
            "git_index_add_frombuffer",
            "git_index_clear",
            "git_index_conflict_add",
            "git_index_conflict_cleanup",
            "git_index_conflict_get",
            "git_index_conflict_iterator_new",
            "git_index_conflict_next",
            "git_index_conflict_remove",
            "git_index_find_prefix",
            "git_index_iterator_next",
            "git_index_new",
            "git_index_open",
            "git_index_read",
            "git_index_read_tree",
            "git_index_remove",
            "git_index_remove_all",
            "git_index_remove_bypath",
            "git_index_remove_directory",
            "git_index_set_caps",
            "git_index_set_version",
            "git_index_update_all",
            "git_index_write",
            "git_index_write_tree",
            "git_index_write_tree_to",
            // indexer.h
            "git_indexer_init_options",
            // mailmap.h
            "git_mailmap_add_entry",
            "git_mailmap_from_buffer",
            "git_mailmap_from_repository",
            "git_mailmap_new",
            "git_mailmap_resolve",
            "git_mailmap_resolve_signature",
            // merge.h
            "git_merge",
            "git_merge_analysis",
            "git_merge_analysis_for_ref",
            "git_merge_base",
            "git_merge_base_many",
            "git_merge_base_octopus",
            "git_merge_bases",
            "git_merge_bases_many",
            "git_merge_commits",
            "git_merge_file",
            "git_merge_file_from_index",
            "git_merge_file_init_input",
            "git_merge_file_init_options",
            "git_merge_init_options",
            "git_merge_trees",
            // message.h
            "git_message_prettify",
            "git_message_trailers",
            // notes.h
            "git_note_commit_create",
            "git_note_commit_iterator_new",
            "git_note_commit_read",
            "git_note_commit_remove",
            "git_note_create",
            "git_note_default_ref",
            "git_note_foreach",
            "git_note_iterator_new",
            "git_note_next",
            "git_note_read",
            "git_note_remove",
            // object.h
            "git_object_lookup",
            "git_object_lookup_bypath",
            "git_object_lookup_prefix",
            "git_object_peel",
            "git_object_short_id",
            // odb.h
            "git_odb_add_alternate",
            "git_odb_add_backend",
            "git_odb_add_disk_alternate",
            "git_odb_exists_prefix",
            "git_odb_expand_ids",
            "git_odb_foreach",
            "git_odb_get_backend",
            "git_odb_hash",
            "git_odb_hashfile",
            "git_odb_new",
            "git_odb_object_dup",
            "git_odb_open",
            "git_odb_open_rstream",
            "git_odb_open_wstream",
            "git_odb_refresh",
            "git_odb_stream_finalize_write",
            "git_odb_stream_write",
            "git_odb_write",
            // odb_backend.h
            "git_odb_backend_loose",
            "git_odb_backend_one_pack",
            "git_odb_backend_pack",
            // oid.h
            "git_oid_fromstr",
            "git_oid_fromstrn",
            "git_oid_fromstrp",
            // pack.h
            "git_packbuilder_foreach",
            "git_packbuilder_insert",
            "git_packbuilder_insert_commit",
            "git_packbuilder_insert_recur",
            "git_packbuilder_insert_tree",
            "git_packbuilder_insert_walk",
            "git_packbuilder_new",
            "git_packbuilder_set_callbacks",
            "git_packbuilder_write",
            // patch.h
            "git_patch_from_blob_and_buffer",
            "git_patch_from_blobs",
            "git_patch_from_buffers",
            "git_patch_from_diff",
            "git_patch_get_hunk",
            "git_patch_get_line_in_hunk",
            "git_patch_line_stats",
            "git_patch_print",
            "git_patch_to_buf",
            // pathspec.h
            "git_pathspec_match_diff",
            "git_pathspec_match_index",
            "git_pathspec_match_tree",
            "git_pathspec_match_workdir",
            "git_pathspec_new",
            // proxy.h
            "git_proxy_init_options",
            // rebase.h
            "git_rebase_abort",
            "git_rebase_commit",
            "git_rebase_finish",
            "git_rebase_init",
            "git_rebase_init_options",
            "git_rebase_next",
            "git_rebase_open",
            // refdb.h
            "git_refdb_new",
            "git_refdb_open",
            // reflog.h
            "git_reflog_append",
            "git_reflog_delete",
            "git_reflog_drop",
            "git_reflog_read",
            "git_reflog_rename",
            "git_reflog_write",
            // refs.h
            "git_reference_create",
            "git_reference_create_matching",
            "git_reference_delete",
            "git_reference_dup",
            "git_reference_dwim",
            "git_reference_ensure_log",
            "git_reference_foreach",
            "git_reference_foreach_glob",
            "git_reference_foreach_name",
            "git_reference_has_log",
            "git_reference_iterator_glob_new",
            "git_reference_iterator_new",
            "git_reference_list",
            "git_reference_lookup",
            "git_reference_name_to_id",
            "git_reference_next",
            "git_reference_next_name",
            "git_reference_normalize_name",
            "git_reference_peel",
            "git_reference_remove",
            "git_reference_rename",
            "git_reference_resolve",
            "git_reference_set_target",
            "git_reference_symbolic_create",
            "git_reference_symbolic_create_matching",
            "git_reference_symbolic_set_target",
            // refspec.h
            "git_refspec_rtransform",
            "git_refspec_transform",
            // remote.h
            "git_fetch_init_options",
            "git_push_init_options",
            "git_remote_add_fetch",
            "git_remote_add_push",
            "git_remote_connect",
            "git_remote_create",
            "git_remote_create_anonymous",
            "git_remote_create_detached",
            "git_remote_create_init_options",
            "git_remote_create_with_fetchspec",
            "git_remote_create_with_opts",
            "git_remote_default_branch",
            "git_remote_delete",
            "git_remote_download",
            "git_remote_dup",
            "git_remote_fetch",
            "git_remote_init_callbacks",
            "git_remote_list",
            "git_remote_lookup",
            "git_remote_ls",
            "git_remote_prune",
            "git_remote_rename",
            "git_remote_set_url",
            "git_remote_update_tips",
            "git_remote_upload",
            // repository.h
            "git_repository_config",
            "git_repository_config_snapshot",
            "git_repository_detach_head",
            "git_repository_discover",
            "git_repository_fetchhead_foreach",
            "git_repository_hashfile",
            "git_repository_head",
            "git_repository_head_for_worktree",
            "git_repository_index",
            "git_repository_init",
            "git_repository_init_ext",
            "git_repository_init_init_options",
            "git_repository_item_path",
            "git_repository_mergehead_foreach",
            "git_repository_message",
            "git_repository_message_remove",
            "git_repository_odb",
            "git_repository_open",
            "git_repository_open_bare",
            "git_repository_open_ext",
            "git_repository_open_from_worktree",
            "git_repository_refdb",
            "git_repository_set_head",
            "git_repository_set_head_detached",
            "git_repository_set_namespace",
            "git_repository_set_workdir",
            "git_repository_state_cleanup",
            "git_repository_wrap_odb",
            // reset.h
            "git_reset",
            "git_reset_default",
            // revert.h
            "git_revert_init_options",
            // revparse.h
            "git_revparse",
            "git_revparse_ext",
            "git_revparse_single",
            // revwalk.h
            "git_revwalk_hide",
            "git_revwalk_hide_glob",
            "git_revwalk_hide_head",
            "git_revwalk_hide_ref",
            "git_revwalk_new",
            "git_revwalk_push",
            "git_revwalk_push_glob",
            "git_revwalk_push_head",
            "git_revwalk_push_range",
            "git_revwalk_push_ref",
            // signature.h
            "git_signature_default",
            "git_signature_dup",
            "git_signature_from_buffer",
            "git_signature_new",
            "git_signature_now",
            // stash.h
            "git_stash_apply",
            "git_stash_apply_init_options",
            "git_stash_drop",
            "git_stash_foreach",
            "git_stash_pop",
            "git_stash_save",
            // status.h
            "git_status_file",
            "git_status_foreach",
            "git_status_foreach_ext",
            "git_status_init_options",
            "git_status_list_new",
            "git_status_should_ignore",
            // strarray.h
            "git_strarray_copy",
            // submodule.h
            "git_submodule_add_setup",
            "git_submodule_add_to_index",
            "git_submodule_foreach",
            "git_submodule_init",
            "git_submodule_location",
            "git_submodule_lookup",
            "git_submodule_reload",
            "git_submodule_repo_init",
            "git_submodule_resolve_url",
            "git_submodule_set_branch",
            "git_submodule_set_ignore",
            "git_submodule_set_update",
            "git_submodule_set_url",
            "git_submodule_status",
            "git_submodule_update",
            "git_submodule_update_init_options",
            // tag.h
            "git_tag_annotation_create",
            "git_tag_create",
            "git_tag_create_frombuffer",
            "git_tag_create_lightweight",
            "git_tag_delete",
            "git_tag_list",
            "git_tag_list_match",
            "git_tag_lookup",
            "git_tag_lookup_prefix",
            "git_tag_peel",
            "git_tag_target",
            // trace.h
            "git_trace_set",
            // transaction.h
            "git_transaction_commit",
            "git_transaction_lock_ref",
            "git_transaction_new",
            "git_transaction_remove",
            "git_transaction_set_reflog",
            "git_transaction_set_symbolic_target",
            "git_transaction_set_target",
            // transport.h
            "git_cred_default_new",
            "git_cred_ssh_custom_new",
            "git_cred_ssh_interactive_new",
            "git_cred_ssh_key_from_agent",
            "git_cred_ssh_key_memory_new",
            "git_cred_ssh_key_new",
            "git_cred_userpass_plaintext_new",
            // tree.h
            "git_tree_entry_dup",
            "git_tree_entry_to_object",
            "git_tree_lookup",
            "git_tree_lookup_prefix",
            "git_tree_walk",
            "git_treebuilder_insert",
            "git_treebuilder_new",
            "git_treebuilder_write",
            "git_treebuilder_write_with_buffer",
            // worktree.h
            "git_worktree_add",
            "git_worktree_add_init_options",
            "git_worktree_is_locked",
            "git_worktree_list",
            "git_worktree_lookup",
            "git_worktree_prune",
            "git_worktree_prune_init_options",
            "git_worktree_unlock",
            "git_worktree_validate",
        };

        private static readonly HashSet<string> _gitResultFunctionsWithBoolReturned = new HashSet<string>()
        {
            // repository.h
            "git_repository_head_detached",
            "git_repository_head_detached_for_worktree",
            "git_repository_head_unborn",
            "git_repository_is_empty",
        };
    }
}